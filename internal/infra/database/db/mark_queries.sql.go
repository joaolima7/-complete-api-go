// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: mark_queries.sql

package db

import (
	"context"
	"database/sql"
)

const createMark = `-- name: CreateMark :execresult
INSERT INTO marks (id, name) 
VALUES(?, ?)
`

type CreateMarkParams struct {
	ID   string
	Name string
}

func (q *Queries) CreateMark(ctx context.Context, arg CreateMarkParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createMark, arg.ID, arg.Name)
}

const deleteMark = `-- name: DeleteMark :exec
DELETE FROM marks 
WHERE id = ?
`

func (q *Queries) DeleteMark(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteMark, id)
	return err
}

const getAllMarks = `-- name: GetAllMarks :many
SELECT id, name, created_at, updated_at 
FROM marks
`

func (q *Queries) GetAllMarks(ctx context.Context) ([]Mark, error) {
	rows, err := q.db.QueryContext(ctx, getAllMarks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Mark
	for rows.Next() {
		var i Mark
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMarkById = `-- name: GetMarkById :one
SELECT id, name, created_at, updated_at 
FROM marks 
WHERE id = ?
`

func (q *Queries) GetMarkById(ctx context.Context, id string) (Mark, error) {
	row := q.db.QueryRowContext(ctx, getMarkById, id)
	var i Mark
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateMark = `-- name: UpdateMark :execresult
UPDATE marks 
SET name = ?
WHERE id = ?
`

type UpdateMarkParams struct {
	Name string
	ID   string
}

func (q *Queries) UpdateMark(ctx context.Context, arg UpdateMarkParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateMark, arg.Name, arg.ID)
}
