// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: product_queries.sql

package db

import (
	"context"
	"database/sql"
)

const createProduct = `-- name: CreateProduct :execresult
INSERT INTO products (id, name, price, mark_id) 
VALUES(?, ?, ?, ?)
`

type CreateProductParams struct {
	ID     string
	Name   string
	Price  float64
	MarkID sql.NullString
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createProduct,
		arg.ID,
		arg.Name,
		arg.Price,
		arg.MarkID,
	)
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products 
WHERE id = ?
`

func (q *Queries) DeleteProduct(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const getAllProducts = `-- name: GetAllProducts :many
SELECT id, name, price, mark_id, created_at, updated_at 
FROM products
`

func (q *Queries) GetAllProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getAllProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.MarkID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductById = `-- name: GetProductById :one
SELECT id, name, price, mark_id, created_at, updated_at 
FROM products 
WHERE id = ?
`

func (q *Queries) GetProductById(ctx context.Context, id string) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductById, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.MarkID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProductsByMarkId = `-- name: GetProductsByMarkId :many
SELECT id, name, price, mark_id, created_at, updated_at 
FROM products 
WHERE mark_id = ?
`

func (q *Queries) GetProductsByMarkId(ctx context.Context, markID sql.NullString) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getProductsByMarkId, markID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.MarkID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :execresult
UPDATE products 
SET name = ?, price = ?, mark_id = ? 
WHERE id = ?
`

type UpdateProductParams struct {
	Name   string
	Price  float64
	MarkID sql.NullString
	ID     string
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateProduct,
		arg.Name,
		arg.Price,
		arg.MarkID,
		arg.ID,
	)
}
